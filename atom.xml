<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Leron Learn Blog]]></title>
  <subtitle><![CDATA[Keep it simple and happy]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.leehong.me/"/>
  <updated>2017-01-06T08:55:47.000Z</updated>
  <id>http://blog.leehong.me/</id>
  
  <author>
    <name><![CDATA[Leron]]></name>
    <email><![CDATA[virgil.leehong@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[2016年折腾的年终总结]]></title>
    <link href="http://blog.leehong.me/2017/01/06/2016%E5%B9%B4%E6%8A%98%E8%85%BE%E7%9A%84%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://blog.leehong.me/2017/01/06/2016年折腾的年终总结/</id>
    <published>2017-01-06T07:50:29.000Z</published>
    <updated>2017-01-06T08:55:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="回顾">回顾</h2><p>时间节点：</p>
<pre><code><span class="bullet">* </span>3月份 从郎玛信息离职，去一家公司在贵阳的分公司做前端开发。
<span class="bullet">* </span>清明节 回老家拆掉老房子，重新修新房，预计年底结婚。
<span class="bullet">* </span>6月份 又离职，和朋友一起创业，一开始做计算机视觉识别，同时接一些小项目做，也尝试做VR项目，没有什么效果。
<span class="bullet">* </span>7月份 去厦门拍摄婚纱照，领取结婚证。
<span class="bullet">* </span>9月份 买房，经济压力之下又跑到一个做医学教学的公司在贵阳医科大学里面做信息化。
<span class="bullet">* </span>国庆节 回家订婚。
<span class="bullet">* </span>12月份 又离开，来到茅台集团成立的电商公司做前端开发。
</code></pre><h2 id="收获">收获</h2><p>2016年对于我来说是折腾和艰难的一年，一直在换工作和处理各种个人事情以及严重经济压力下度过的；不过还好，基本挺过来了，算完成了人生中2件大事：买房和结婚（还没有办酒）。 今年最大的收获应该是处理事情更加成熟了，对待人和事情的态度更加理性的分析和处理。<br><a id="more"></a></p>
<h2 id="新年计划">新年计划</h2><pre><code>* 坚持写博客，努力做到写<span class="number">30</span>篇以上，至少每月<span class="number">1</span>篇技术方面的文章, <span class="number">5</span>篇AI方面的知识文章。
* 带着老婆一起健身，学会游泳，能够游<span class="number">10</span>m以上；每天<span class="number">11</span>点之前睡觉，早上<span class="number">7</span>点起床。
* 读<span class="number">40</span>本以上的书，至少<span class="number">3</span>本关于经济的、<span class="number">3</span>本关于管理的，<span class="number">1</span>个月有一篇读后感。
* 学习一门新的语言。
</code></pre><p>毕业之后每年心里都有给自己设目标，几乎每年都没有完成，一方面有惰性在里面，一方面是自己没有记录下来，以前一直觉得做记录是浪费时间的事情，上个月整理前几年零零散散的evernote笔记的时候，发现好多东西都忘记了，体会到记录是很重要的。</p>
<p>最后希望家人都身体健健康康，工作顺顺利利。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="回顾">回顾</h2><p>时间节点：</p>
<pre><code><span class="bullet">* </span>3月份 从郎玛信息离职，去一家公司在贵阳的分公司做前端开发。
<span class="bullet">* </span>清明节 回老家拆掉老房子，重新修新房，预计年底结婚。
<span class="bullet">* </span>6月份 又离职，和朋友一起创业，一开始做计算机视觉识别，同时接一些小项目做，也尝试做VR项目，没有什么效果。
<span class="bullet">* </span>7月份 去厦门拍摄婚纱照，领取结婚证。
<span class="bullet">* </span>9月份 买房，经济压力之下又跑到一个做医学教学的公司在贵阳医科大学里面做信息化。
<span class="bullet">* </span>国庆节 回家订婚。
<span class="bullet">* </span>12月份 又离开，来到茅台集团成立的电商公司做前端开发。
</code></pre><h2 id="收获">收获</h2><p>2016年对于我来说是折腾和艰难的一年，一直在换工作和处理各种个人事情以及严重经济压力下度过的；不过还好，基本挺过来了，算完成了人生中2件大事：买房和结婚（还没有办酒）。 今年最大的收获应该是处理事情更加成熟了，对待人和事情的态度更加理性的分析和处理。<br>]]>
    
    </summary>
    
      <category term="年终总结" scheme="http://blog.leehong.me/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[全新生活]]></title>
    <link href="http://blog.leehong.me/2014/03/19/%E5%85%A8%E6%96%B0%E7%94%9F%E6%B4%BB/"/>
    <id>http://blog.leehong.me/2014/03/19/全新生活/</id>
    <published>2014-03-18T16:33:20.000Z</published>
    <updated>2015-10-26T16:30:06.000Z</updated>
    <content type="html"><![CDATA[<p>时间过的很快，很多事情是不等你适应，就开始了新的生活，离开北京，回到贵阳，一切都重新开始，新的环境，新的公司，<br>新的同时，当然还有新的室友，一切感觉都是新的，一切都是那么的适应，又是那么的不适应，好像去那儿我都好像是这样。<br>不知这样的感知从来就没有过？谁知道呢？</p>
<h2 id="关于贵阳">关于贵阳</h2><p>刚来的几天，贵阳还处于冬天到春天的复苏阶段，阴冷阴冷的，都是晚上下雨，白天阴天，地上都是湿漉漉的。<br>对于我来说，贵阳不是那么生疏，也不那么熟悉，也就在这里转过几次车，逗留的时间加起来也不超过一个星期吧，<br>自身感应来说，一无所知貌似又有点太绝对了，知道的地点就那么几个，去过的地方也是那么几个。索性的是吃、说话，<br>还有很多的高中同学，以就几乎和老家没有什么区别了。相对于北京来说，贵阳的确是一个宜居的地方，相对温和的天气，<br>对于来我来说还有各种各样能吃的小吃和可口的饭菜，爽急了。不足的是交通相对不方便，公交车大部分都很烂，<br>更郁闷的是在修轻轨，不知道政府怎么想的？各种各样的天桥，感觉就是这座城市过度的设计，细节做的很差。<br>还有就是贵阳的物价，让人无法直视，除了房价，一般的消费更北京比起来相差无几，而工资只能用”呵呵”来形容了。<br><a id="more"></a></p>
<h2 id="新的公司">新的公司</h2><p>找一个一个星期的工作，一开始不得不说很郁闷，有一个公司尽然这样说，你之前的工作经验在这里都不算，<br>工资也要从初级算起，弄的一个纳闷，无话可说，寒暄一下，离去。面试了两三家，得出的结论就是，你可以来，情况就这样，<br>工资就这样，你的接受。想想，算了，决定来这里生活，心里暗暗的说了几声，我去，我去… 然后就早九晚五的上班下班了。</p>
<h2 id="关于未来">关于未来</h2><p>努力工作，攒点钱，结婚，生小孩，此生应该就是这样了，该干嘛干嘛了，说到底，生活也不就是这样嘛！<br>总之都要come on了，给自己点正能量了，O(∩_∩)O~～～～！！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>时间过的很快，很多事情是不等你适应，就开始了新的生活，离开北京，回到贵阳，一切都重新开始，新的环境，新的公司，<br>新的同时，当然还有新的室友，一切感觉都是新的，一切都是那么的适应，又是那么的不适应，好像去那儿我都好像是这样。<br>不知这样的感知从来就没有过？谁知道呢？</p>
<h2 id="关于贵阳">关于贵阳</h2><p>刚来的几天，贵阳还处于冬天到春天的复苏阶段，阴冷阴冷的，都是晚上下雨，白天阴天，地上都是湿漉漉的。<br>对于我来说，贵阳不是那么生疏，也不那么熟悉，也就在这里转过几次车，逗留的时间加起来也不超过一个星期吧，<br>自身感应来说，一无所知貌似又有点太绝对了，知道的地点就那么几个，去过的地方也是那么几个。索性的是吃、说话，<br>还有很多的高中同学，以就几乎和老家没有什么区别了。相对于北京来说，贵阳的确是一个宜居的地方，相对温和的天气，<br>对于来我来说还有各种各样能吃的小吃和可口的饭菜，爽急了。不足的是交通相对不方便，公交车大部分都很烂，<br>更郁闷的是在修轻轨，不知道政府怎么想的？各种各样的天桥，感觉就是这座城市过度的设计，细节做的很差。<br>还有就是贵阳的物价，让人无法直视，除了房价，一般的消费更北京比起来相差无几，而工资只能用”呵呵”来形容了。<br>]]>
    
    </summary>
    
      <category term="life" scheme="http://blog.leehong.me/tags/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[angularjs的入门窥探]]></title>
    <link href="http://blog.leehong.me/2013/11/24/angularjs%E7%9A%84%E5%85%A5%E9%97%A8%E7%AA%A5%E6%8E%A2/"/>
    <id>http://blog.leehong.me/2013/11/24/angularjs的入门窥探/</id>
    <published>2013-11-24T13:58:49.000Z</published>
    <updated>2015-10-26T14:51:57.000Z</updated>
    <content type="html"><![CDATA[<p>在年初的angular火爆的时期学跟着官方文档学了一下，了解一下它到底是什么样子的，语法什么的，零零闪闪看了一个星期左右的样子，本来准备推广到公司的项目中，有人说太灵活，大家也都不了解，出现问题觉得很解决也是一个问题，也就不了了之了，继续使用backbone了，这又让我想到了各种语言之间和各种框架之间好坏的争论，一直认为好坏是要看什么样的人来用它的。angular相对其它前端框架来实在是太强大和灵活了，所以注定它也是很大的，概念或者api都挺多的。简单记录一些觉得比较重要的概念。</p>
<p>##angular重要的一些概念</p>
<ol>
<li><p>angular的加载过程，或者说是浏览器解析的流程。从官方文档找到一张图来描述加载的过程:<img src="http://code.angularjs.org/1.1.0/docs/img/guide/concepts-startup.png" alt="angular 加载过程"></p>
<a id="more"></a>
<p>详细流程:</p>
<ul>
<li>浏览器加载html file并解析成dom。</li>
<li>加载angular的js文件。</li>
<li>angularjs的domContentLoaded事件触发。</li>
<li>angularjs的<code>np-app</code>指令来确定作用边界。</li>
<li><code>np-app</code>对应的模块来配置注入器($injector)。</li>
<li>注入器创建编译服务($compile service)和根作用域($rootscope)。</li>
<li>编译服务编译模板dom并把它链接到根作用域。</li>
</ul>
</li>
<li><p>数据绑定: 简单说就是html中某部分dom映射到某个javascript的属性，angular特别之处是双向绑定而且还是同步的。同样来自官方文档的图:<img src="http://docs.angularjs.org/img/Two_Way_Data_Binding.png" alt=""></p>
</li>
<li><p>依赖注入: 是一种设计原则，可以用来减低计算机代码之间的耦合度。<br>记得最开始听到这个词是在学java的spring框架的时候，始终没有理解透彻, 在angular中也应该差不多那个意思吧。wiki里面对这个词的描述<a href="http://zh.wikipedia.org/wiki/%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC" target="_blank" rel="external">wiki 链接</a>。那angular又是怎么用得呢？angular是通过注入器(injector)用来处理依赖的创建的。一个很简单的ex:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SomeClass</span>(<span class="params">greeter</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.greeter = greeter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SomeClass.prototype.doSomething = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.greeter.greet(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>具体angular是怎么实现的呢？可以参考angular中文社区翻译的: <a href="http://www.angularjs.cn/A00z" target="_blank" rel="external">angular开发指南</a></p>
<ol>
<li>指令(directive):  标记dom节点，通过angular 编译来增加这个dom节点或者子节点特性行为。angular本身就封装了一些我们常用的，如: ng-bind、ng-repeat等等。 我们也可以自己写,下面是angularjs book中得一个简单列子.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'app'</span>, [])</span><br><span class="line">  .directive(<span class="string">'focus'</span>,</span><br><span class="line">     <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> &#123;</span><br><span class="line">         link: <span class="function"><span class="keyword">function</span>(<span class="params">scope, element, attrs</span>)</span>&#123;</span><br><span class="line">           element[<span class="number">0</span>].focus();</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>在模板中使用<code>&lt;input type=&quot;text&quot; focus&gt;&lt;/input&gt;</code> 就可以了，很像是一个dsl，非常的灵活.</p>
<p>###参考资料<br><a href="http://docs.angularjs.org/" target="_blank" rel="external">http://docs.angularjs.org/</a><br><a href="http://angularjs.cn/" target="_blank" rel="external">http://angularjs.cn/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在年初的angular火爆的时期学跟着官方文档学了一下，了解一下它到底是什么样子的，语法什么的，零零闪闪看了一个星期左右的样子，本来准备推广到公司的项目中，有人说太灵活，大家也都不了解，出现问题觉得很解决也是一个问题，也就不了了之了，继续使用backbone了，这又让我想到了各种语言之间和各种框架之间好坏的争论，一直认为好坏是要看什么样的人来用它的。angular相对其它前端框架来实在是太强大和灵活了，所以注定它也是很大的，概念或者api都挺多的。简单记录一些觉得比较重要的概念。</p>
<p>##angular重要的一些概念</p>
<ol>
<li><p>angular的加载过程，或者说是浏览器解析的流程。从官方文档找到一张图来描述加载的过程:<img src="http://code.angularjs.org/1.1.0/docs/img/guide/concepts-startup.png" alt="angular 加载过程"></p>]]>
    
    </summary>
    
      <category term="angular" scheme="http://blog.leehong.me/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Button Tag 的一些细节]]></title>
    <link href="http://blog.leehong.me/2013/11/18/button-tag-%E7%9A%84%E9%82%A3%E4%BA%9B%E7%BB%86%E8%8A%82/"/>
    <id>http://blog.leehong.me/2013/11/18/button-tag-的那些细节/</id>
    <published>2013-11-18T08:58:17.000Z</published>
    <updated>2015-10-26T14:51:57.000Z</updated>
    <content type="html"><![CDATA[<p>##问题<br>早上碰到的关于button tag问题，准确说应该是敲代码时没有注意，遗漏了button type 的attribute赋值。问题是这样的，就是button 效果在chrome下是不正常的，第一次刷新了整个页面，而我绑定的事件处理只是页面的一部分，但是第二次就是正常了，我换firefox是没有问题的？一开始猜测难道在绑定事件涉及到了浏览器兼容问题？就在chrome下debug，发现第一次在jQuery 事件进到这个if语句:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !(eventHandle = elemData.handle) ) &#123;</span><br><span class="line">  eventHandle = elemData.handle = <span class="function"><span class="keyword">function</span>(<span class="params"> e </span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Discard the second event of a jQuery.event.trigger() and</span></span><br><span class="line">    <span class="comment">// when an event is called after a page has unloaded</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> jQuery !== core_strundefined &amp;&amp; (!e || jQuery.event.triggered !== e.type) ?</span><br><span class="line">    jQuery.event.dispatch.apply( eventHandle.elem, <span class="built_in">arguments</span> ) :</span><br><span class="line">    <span class="literal">undefined</span>;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>第二次没有，那就是第一次eventHandle和当前dom的handle不一致出现的，为什么会不一致呢？返回去看到button 这个tag 没有加上type属性，难道是这个问题？加上果然就好了。虽然不是什么大问题，心理总有点什么，没有安全感，顺便就去看看button的tag的文档，主要是它得type属性。</p>
<p>##Button type<br>Button 这个标签重点应该是在type这个属性上，type有3个值:</p>
<ol>
<li>submit:”submits the form when clicked (default)”</li>
<li>reset: “resets the fields in the form when clicked”</li>
<li>button: “clickable, but without any event handler until one is assigned”</li>
</ol>
<p>总结：出现这中小问题，不细心加上没有系统阅读html tag 文档的结果吧。</p>
<p>##参考资料<br><a href="http://stackoverflow.com/a/10079197/1335396" target="_blank" rel="external">http://stackoverflow.com/a/10079197/1335396</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>##问题<br>早上碰到的关于button tag问题，准确说应该是敲代码时没有注意，遗漏了button type 的attribute赋值。问题是这样的，就是button 效果在chrome下是不正常的，第一次刷新了整个页面，而我绑定的事件处理只是页面的一部分，但是第二次就是正常了，我换firefox是没有问题的？一开始猜测难道在绑定事件涉及到了浏览器兼容问题？就在chrome下debug，发现第一次在jQuery 事件进到这个if语句:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !(eventHandle = elemData.handle) ) &#123;</span><br><span class="line">  eventHandle = elemData.handle = <span class="function"><span class="keyword">function</span>(<span class="params"> e </span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Discard the second event of a jQuery.event.trigger() and</span></span><br><span class="line">    <span class="comment">// when an event is called after a page has unloaded</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> jQuery !== core_strundefined &amp;&amp; (!e || jQuery.event.triggered !== e.type) ?</span><br><span class="line">    jQuery.event.dispatch.apply( eventHandle.elem, <span class="built_in">arguments</span> ) :</span><br><span class="line">    <span class="literal">undefined</span>;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="html" scheme="http://blog.leehong.me/tags/html/"/>
    
      <category term="javascript" scheme="http://blog.leehong.me/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[不得不说的eval方法]]></title>
    <link href="http://blog.leehong.me/2013/11/14/%E4%B8%8D%E5%BE%97%E4%B8%8D%E8%AF%B4%E7%9A%84eval%E6%96%B9%E6%B3%95/"/>
    <id>http://blog.leehong.me/2013/11/14/不得不说的eval方法/</id>
    <published>2013-11-14T13:01:00.000Z</published>
    <updated>2015-10-26T14:51:57.000Z</updated>
    <content type="html"><![CDATA[<p>今天在处理数据的时候碰到这样一个问题，接口过来的数据是一个数字字符串(是数字但是类型是字符串)数组，这些字符串呢又是数字，现在想做的就是将这个数组里面的所有字符串进行相加。一开始想到的是这样做的:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str_array = [<span class="string">'12'</span>,<span class="string">'45'</span>, <span class="string">'56'</span>];</span><br><span class="line"><span class="keyword">var</span> int_array = str_array.map(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">parseInt</span>(value)&#125;); <span class="comment">//return a array [12,45, 56]</span></span><br><span class="line"><span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; int_array.length; i++) &#123;</span><br><span class="line">  total += int_array[i];</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>对一个数组进行求和一定要做for循环，作为一个ruby语言的爱好者，直觉告诉我应该还没有简单的方法呢？完全可以不用循环，可以这样：<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> str_array = [<span class="string">'12'</span>,<span class="string">'45'</span>, <span class="string">'56'</span>];</span><br><span class="line">str_array.map(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123; total += <span class="built_in">parseInt</span>(value) &#125;);</span><br></pre></td></tr></table></figure></p>
<p>感觉是不是要爽一些呢？但是还有没有更简洁的方式呢？当一段代码你感觉能优化时，那肯定可以优化的，看看下面这个版本:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str_array = [<span class="string">'12'</span>,<span class="string">'45'</span>, <span class="string">'56'</span>];</span><br><span class="line"><span class="keyword">var</span> total = <span class="built_in">eval</span>(str_array.join(<span class="string">'+'</span>));</span><br></pre></td></tr></table></figure></p>
<p>是不是觉得想说，这太帅气了。</p>
<p>eval 看上去貌似很简单的样子, 这样调用就可以了<code>eval(string)</code>, 其实它很强大的。那有为什么我们很少在开源的代码中看到它的身影，至于原因，也归功于它太强大了，强大的东西虽好，但是一般人很难驾驭的，用不好呢就会适得其反, 所以很多的文章建议不要用它, 例如这里有一篇03年的文章<a href="http://blogs.msdn.com/b/ericlippert/archive/2003/11/01/53329.aspx" target="_blank" rel="external">Eval is Evil</a>，但是大牛Payin’ Bills最近写了 写了一篇文章说<a href="http://www.nczonline.net/blog/2013/06/25/eval-isnt-evil-just-misunderstood/" target="_blank" rel="external">eval() isn’t evil, just misunderstood</a>, 说到底呢，用的好不好还是看用得人，强大的东西都建议不要用得它负责，也就做做上面这样的就差不多了^_^…</p>
<p>###eval 详细的用法参考:<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天在处理数据的时候碰到这样一个问题，接口过来的数据是一个数字字符串(是数字但是类型是字符串)数组，这些字符串呢又是数字，现在想做的就是将这个数组里面的所有字符串进行相加。一开始想到的是这样做的:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str_array = [<span class="string">'12'</span>,<span class="string">'45'</span>, <span class="string">'56'</span>];</span><br><span class="line"><span class="keyword">var</span> int_array = str_array.map(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">parseInt</span>(value)&#125;); <span class="comment">//return a array [12,45, 56]</span></span><br><span class="line"><span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; int_array.length; i++) &#123;</span><br><span class="line">  total += int_array[i];</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>对一个数组进行求和一定要做for循环，作为一个ruby语言的爱好者，直觉告诉我应该还没有简单的方法呢？完全可以不用循环，可以这样：<br>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://blog.leehong.me/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Use hexo create blog]]></title>
    <link href="http://blog.leehong.me/2013/11/06/hello-world/"/>
    <id>http://blog.leehong.me/2013/11/06/hello-world/</id>
    <published>2013-11-06T13:52:33.000Z</published>
    <updated>2015-10-26T14:51:57.000Z</updated>
    <content type="html"><![CDATA[<p>#About Hexo<br><a href="http://zespia.tw/hexo" target="_blank" rel="external">Hexo</a>是一个基于Node.js的静态博客程序，可以方便的生成静态网页托管在github!作者<a href="https://github.com/tommy351/hexo" target="_blank" rel="external">@tommy351</a>是来自于台湾,它对于hexo的描述是这样:”A fast, simple &amp; powerful blog framework, powered by Node.js”;</p>
<p>#为什么选择hexo<br>之前折腾过Octopress、jekyll，花掉很多时间找主题，而且操作起来太不友好了，尤其对于不熟悉的人来说。如果你还在犹豫，嫌Octopress不够简单，jekyll太丑，那还等什么？快来使用hexo吧,简单、还大气、小清新、上档次，有木有？</p>
  <a id="more"></a>
<p>#参考资料<br>首先是hexo的<a href="http://zespia.tw/hexo/docs/" target="_blank" rel="external">doc</a>, 花3min差不多就看完了，其次就是<a href="http://zipperary.com/categories/hexo/" target="_blank" rel="external">zippera</a>的一系列文章，也相当简单，step and step，2 hours 就有了这么上档次的blog了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>#About Hexo<br><a href="http://zespia.tw/hexo">Hexo</a>是一个基于Node.js的静态博客程序，可以方便的生成静态网页托管在github!作者<a href="https://github.com/tommy351/hexo">@tommy351</a>是来自于台湾,它对于hexo的描述是这样:”A fast, simple &amp; powerful blog framework, powered by Node.js”;</p>
<p>#为什么选择hexo<br>之前折腾过Octopress、jekyll，花掉很多时间找主题，而且操作起来太不友好了，尤其对于不熟悉的人来说。如果你还在犹豫，嫌Octopress不够简单，jekyll太丑，那还等什么？快来使用hexo吧,简单、还大气、小清新、上档次，有木有？</p>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://blog.leehong.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[rake介绍]]></title>
    <link href="http://blog.leehong.me/2012/11/17/guan-yu-rake/"/>
    <id>http://blog.leehong.me/2012/11/17/guan-yu-rake/</id>
    <published>2012-11-16T16:33:20.000Z</published>
    <updated>2015-10-26T14:51:57.000Z</updated>
    <content type="html"><![CDATA[<p>rake是一个用ruby开发的代码构建工具,以任务的方式创建和运行脚本.非常非常的有用,在我们项目中需要不同环境切换等等,用rake来管理大大提高效率.<br><a href="http://docs.rubyrake.org/user_guide/index.html" target="_blank" rel="external">rake用户手册</a></p>
<p>就用一些小demo来学习吧,动手是最好最有用的方式,再简单的demo也要动手去做,let’s go.首先在项目目录下新建一个Rakefiles文件.然后添加如下代码:</p>
<pre><code>desc <span class="string">"describe you rake task"</span>
task <span class="symbol">:one</span> <span class="keyword">do</span>
    p <span class="string">"first task"</span>
<span class="keyword">end</span>
</code></pre><p>  然后用rake  one 命令,就看到你想要看到的结果了,这里task是Rake最重要的方法。它的方法定义是：task(args, &amp;block)。任务体是一个block.<br>  <a id="more"></a></p>
<p>  依赖关系：在一个task执行之前，需要其它的task执行</p>
<pre><code>task ：one <span class="keyword">do</span>
   p <span class="string">"first task"</span>
<span class="keyword">end</span>

task <span class="symbol">:two</span> =&gt; <span class="symbol">:one</span> <span class="keyword">do</span>
  p <span class="string">"second task"</span>
<span class="keyword">end</span>
</code></pre><p>运行 rake two，结果自己试试。。</p>
<p>rake文件里有很多的任务时，你需要关注它们的命名冲突问题，因为task的命名需要是唯一的。这时候命名空间（namespace）就是一个自然的解决方案。你可以为上面的2个任务定义一个叫做install的命名空间</p>
<pre><code>namesapce <span class="symbol">:install</span> <span class="keyword">do</span>
  task <span class="symbol">:one</span> <span class="keyword">do</span>
    p  <span class="string">"sdsds"</span>
  <span class="keyword">end</span>
  ...
<span class="keyword">end</span>
</code></pre><p>运行rake –tasks就可以看到rake的结构，运行方式是rake install:one的方式。</p>
<p>在一个task中调用其它的task，使用Rake::Task[“task_name”].invoke 方法。</p>
<pre><code>task <span class="symbol">:four</span> <span class="keyword">do</span>
  <span class="constant">Rake:</span><span class="symbol">:Task</span>[<span class="string">"one"</span>].invoke
    p <span class="string">"four rask"</span>
<span class="keyword">end</span>
</code></pre><p>其实这和依赖是一样的，写法不一样而已，它也等于</p>
<pre><code> task <span class="symbol">:four</span> =&gt; <span class="symbol">:one</span> <span class="keyword">do</span>
    p <span class="string">"four rask"</span>
<span class="keyword">end</span>
</code></pre><p>可以为Rake增加一个默认任务，这样可以简单地用Rake命令来触发这个默认任务,</p>
<pre><code>task <span class="symbol">:deault</span> =&gt;[<span class="symbol">:one</span>]
</code></pre><p>这样的语句导入各个子任务即可，不同的任务写到不同的文件里面就不会一团糟了。而且，import 同 Ruby 自己的 require 不一样，import 并不是立即进行导入的，而是在整个 Rakefile 执行结束之后才全部导入，因此，可以在任意的地方写 import ，而不用担心依赖关系，需要共享的变量之类的只要在主 Rakefile 中定义了即可</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>rake是一个用ruby开发的代码构建工具,以任务的方式创建和运行脚本.非常非常的有用,在我们项目中需要不同环境切换等等,用rake来管理大大提高效率.<br><a href="http://docs.rubyrake.org/user_guide/index.html">rake用户手册</a></p>
<p>就用一些小demo来学习吧,动手是最好最有用的方式,再简单的demo也要动手去做,let’s go.首先在项目目录下新建一个Rakefiles文件.然后添加如下代码:</p>
<pre><code>desc <span class="string">"describe you rake task"</span>
task <span class="symbol">:one</span> <span class="keyword">do</span>
    p <span class="string">"first task"</span>
<span class="keyword">end</span>
</code></pre><p>  然后用rake  one 命令,就看到你想要看到的结果了,这里task是Rake最重要的方法。它的方法定义是：task(args, &amp;block)。任务体是一个block.<br>]]>
    
    </summary>
    
      <category term="ruby" scheme="http://blog.leehong.me/tags/ruby/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于使用devise]]></title>
    <link href="http://blog.leehong.me/2012/10/09/guan-yu-shi-yong-devise/"/>
    <id>http://blog.leehong.me/2012/10/09/guan-yu-shi-yong-devise/</id>
    <published>2012-10-08T17:08:25.000Z</published>
    <updated>2015-10-26T14:51:57.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/plataformatec/devise" target="_blank" rel="external">devise</a>是rails的一个gem,rails 的gem的好处就是各种便利,即使你不知道它的内在原理,你也可以很好的使用,只要你按照doc操作.关于devise的好处就不用说了,使用它之后不用不用在关心帐号的各种处理了,只要你按照它的步骤操作,一分钟就搞定了,给我们带来了很大的便利.</p>
<p>怎么使用devise就不详细说了,官方和现在的资料已经很仔细了,我要说的是这个方法<code>after_sign_up_path_for</code> ,这个方法里面你对制定的帐号登陆之后跳转的到指定的path,例如:</p>
<pre><code><span class="keyword">private</span>
<span class="function"><span class="keyword">def</span> <span class="title">after_sign_in_path_for</span></span>(resource)
  这里进行处理
  <span class="keyword">if</span> resource.<span class="keyword">is_a?</span>(<span class="constant">User</span>)
    这里指定的path
  <span class="keyword">else</span>
    <span class="keyword">super</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>
</code></pre><p>对应的登出也有这样的一个方法</p>
<pre><code><span class="keyword">private</span>
<span class="function"><span class="keyword">def</span> <span class="title">after_sign_out_path_for</span></span>(resource_or_scope)
    这里一般是跳到首页了
<span class="keyword">end</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://github.com/plataformatec/devise" target="_blank" rel="external">devise</a>是rails的一个gem,rails 的gem的好处就是各种便利,即使你不知道它的内在原理,]]>
    </summary>
    
      <category term="rails" scheme="http://blog.leehong.me/tags/rails/"/>
    
  </entry>
  
</feed>
